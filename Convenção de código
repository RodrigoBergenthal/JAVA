
## üìò Para Saber Mais: Conven√ß√£o de C√≥digo ‚Äî Reposit√≥rio de Classes.Estudos

Este reposit√≥rio complementa os estudos anteriores abordando as conven√ß√µes de c√≥digo em Java, que s√£o boas pr√°ticas recomendadas pela Oracle e pela comunidade de desenvolvedores. Seguir essas diretrizes deixa o c√≥digo mais leg√≠vel, organizado e f√°cil de manter.

---

## üöÄ Conven√ß√µes Abordadas

- ‚úÖ Nomes de classes em **PascalCase**
- ‚úÖ Nomes de m√©todos e vari√°veis em **camelCase**
- ‚úÖ Constantes em **MAI√öSCULAS_SEPARADAS_POR_UNDERSCORE**
- ‚úÖ Linhas com no m√°ximo **80 caracteres**
- ‚úÖ Uso adequado de **espa√ßos em branco** para clareza
- ‚úÖ Utiliza√ß√£o de **coment√°rios explicativos e concisos**
- ‚úÖ Organiza√ß√£o e padroniza√ß√£o do c√≥digo

---

## üß† Exemplos Pr√°ticos

### üéØ Classe com Conven√ß√µes Aplicadas

```java
public class CalculadoraBasica {

    private static final int VALOR_PADRAO = 10;

    public int somar(int a, int b) {
        return a + b;
    }

    public int subtrair(int a, int b) {
        return a - b;
    }

    public void imprimirResultado(int resultado) {
        System.out.println("Resultado: " + resultado);
    }
}
```

---

### üí¨ Conven√ß√£o de Coment√°rios

```java
// Soma dois n√∫meros inteiros
public int somar(int x, int y) {
    return x + y;
}
```

> Observa√ß√£o: Muitos desenvolvedores preferem usar nomes de m√©todos e vari√°veis autoexplicativos para reduzir a necessidade de coment√°rios redundantes.

---

## ‚ö° Boas Pr√°ticas Extras

- Evite nomes gen√©ricos como `data`, `valor`, `coisa` ‚Äî prefira `dataNascimento`, `precoTotal`, `produtoSelecionado`.
- Evite abrevia√ß√µes dif√≠ceis de entender (por exemplo: `calcVrFnl`).
- Mantenha a indenta√ß√£o consistente.
- Agrupe funcionalidades semelhantes no mesmo arquivo ou pacote.

---

## üõ† Tecnologias Utilizadas

- Java JDK 17+
- IntelliJ IDEA

